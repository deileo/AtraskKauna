<?php

namespace NFQ\KVKScraperBundle\Entity;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\Query;

/**
 * EventCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventCategoryRepository extends \Doctrine\ORM\EntityRepository
{

    public function saveCategories($eventCategories){

        foreach($eventCategories as $eventCategory){
            /**
             * @var EventCategory $eventCategory
             */
            if( ! $this->categoryNameExists($eventCategory->getCategoryName()) && $eventCategory->getCategoryName() !== 'Spektakliai'){
                $this->getEntityManager()->persist($eventCategory);
            }
        }
        $this->getEntityManager()->flush();

    }

    public function categoryNameExists($categoryName){
        return $this->findOneBy([
            'categoryName' => $categoryName
        ]);
    }

    /**
     * @param $categoryId
     *
     * @return array
     */
    public function getCategoryWithFacebookEvent($categoryId)
    {
        $result =  $this->createQueryBuilder('event_category_repository')
            ->select('event_category_repository, events')
            ->leftJoin(
                'event_category_repository.events',
                'events'
            )
            ->leftJoin(
                'events.facebookEvent',
                'facebookEvent'
            )
            ->groupBy('facebookEvent.facebookEventId')
            ->where('event_category_repository.eventCategoryId = :id')
            ->andWhere('events.facebookEvent IS NOT NULL')
            ->orderBy('facebookEvent.attendingCount', 'DESC')
            ->setParameter('id', $categoryId)
            ->getQuery()
            ->getResult(AbstractQuery::HYDRATE_OBJECT);

        return reset($result);
    }
}
