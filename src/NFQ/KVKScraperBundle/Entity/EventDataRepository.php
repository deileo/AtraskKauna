<?php

namespace NFQ\KVKScraperBundle\Entity;

/**
 * EventDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventDataRepository extends \Doctrine\ORM\EntityRepository
{

    public function saveEventsData($eventsData){

        foreach($eventsData as $eventData){
            /**
             * @var EventData $eventData
             */
            $this->getEntityManager()->persist($eventData);
        }
        $this->getEntityManager()->flush();

    }

    /**
     * @return array
     */
    public function getAllEventsWithFacebookId()
    {
        $qb = $this->createQueryBuilder('ed');

        $result=$qb->select('ed','facebookEvent')->leftJoin('ed.facebookEvent','facebookEvent')
            ->groupBy('facebookEvent.facebookEventId')
            ->where('ed.facebookEvent IS NOT NULL')
            ->orderBy('facebookEvent.attendingCount', 'DESC')
            ->getQuery()
            ->getResult();
        return $result;
    }

    /**
     * @param $date
     * @return array
     */
    public function getTodaysEvents($date)
    {
        $qb = $this->createQueryBuilder('facebook_events');

        $result=$qb->select('facebook_events','facebookEvent')->leftJoin('facebook_events.facebookEvent','facebookEvent')
            ->where($qb->expr()->like('facebookEvent.startTime',':time'))
            ->andWhere('facebookEvent.startTime IS NOT NULL')
            ->setParameter('time', $date.'%')
            ->getQuery()
            ->getResult();

        return $result;
    }

    public function getWeeksEvents($date, $today){
        $qb = $this->createQueryBuilder('facebook_events');

        $result=$qb->select('facebook_events','facebookEvent')->leftJoin('facebook_events.facebookEvent','facebookEvent')
            ->where('facebookEvent.startTime >= :today')
            ->andWhere('facebookEvent.startTime < :time')
            ->andWhere('facebookEvent.startTime IS NOT NULL')
            ->setParameter('time', $date)
            ->setParameter('today', $today)
            ->getQuery()
            ->getResult();

        return $result;

    }

    /**
     * @return array
     */
    public function getAllEventsWithCategoryId($CategoryId)
    {
        return $this->createQueryBuilder('ed')->where(['ed.eventCategoryId' => $CategoryId])->getQuery()->getResult();
    }

    public function getAllWhereFacebookEventIdExists(){
        $query = $this->createQueryBuilder('ed')
            ->where('ed.facebookEventId IS NOT NULL')
            ->orderBy('ed.facebookEventId', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

}
